import unittest
import networkx as nx
import PointwiseVulnerability as pv

class Test_PointwiseVulnerability_Test(unittest.TestCase):
    def setUp(self):
        G1 = nx.Graph()
        G1.add_nodes_from(list(range(0, 12)))
        _a = ord('A')
        for v in G1.nodes():    
            G1.node[v]['name'] = chr(_a + v)
            G1.node[v]['coord'] = ((v % 4) * 3, (v // 4) * 4) # X and Y

        # creating some edges
        edges = [(0, 1, 3), (1, 2, 3), (2, 3, 3), 
                 (4, 5, 3), (5, 6, 3), (6, 7, 3), 
                 (8, 9, 3), (9, 10, 3), (10, 11, 3), 
                 (0, 4, 4), (1, 5, 4), (2, 6, 4),
                 (3, 7, 4), (4, 8, 4), (5, 9, 4),
                 (6, 10, 4), (7, 11, 4), (0, 5, 5), (2, 5, 5), (2, 7, 5), (5, 8, 5), (5, 10, 5), (7, 10, 5)]

        G1.add_weighted_edges_from(edges)
        # nxe.plot_graph(G1, 'spectral') # draws a "rocket" formed graph
        self.G1 = G1        
        return super().setUp()

    def test_A(self):
        node_removed = 5
        result = pv.information_centrality(self.G1, node_removed)
        self.assertTrue(result - 0.08333 < 1e5) # tolerating some floating error
    
    def test_B(self):
        node_removed = 5
        result = pv.global_vulnerability(self.G1)
        self.assertTrue(result[0]['vuln'] - 0.08333 < 1e5 and result[0]['node'] == 5) # tolerating some floating error

if __name__ == '__main__':
    unittest.main()
